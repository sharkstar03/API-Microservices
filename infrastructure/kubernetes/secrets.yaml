apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: microservices
type: Opaque
stringData:
  # Estas son claves de ejemplo. En un entorno real, deberías generar valores seguros
  # y usar herramientas como Sealed Secrets, AWS Secrets Manager, HashiCorp Vault, etc.
  jwt-secret: "replace_with_a_secure_random_string"
  refresh-token-secret: "replace_with_another_secure_random_string"
  internal-api-key: "replace_with_internal_api_key"
  mysql-user: "root"
  mysql-password: "replace_with_secure_db_password"
  mongodb-uri: "mongodb://username:password@mongodb:27017/admin"
  redis-password: "replace_with_redis_password"
  rabbitmq-user: "guest"
  rabbitmq-password: "guest"
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-basic-auth
  namespace: microservices
type: Opaque
stringData:
  # Esto es un ejemplo. Deberías generar un hash bcrypt de tu contraseña
  # Para generar un htpasswd: htpasswd -c auth admin
  auth: "admin:$apr1$qSyF5Fux$UzUUVTX.cRXrKhsmWMHmQ/"